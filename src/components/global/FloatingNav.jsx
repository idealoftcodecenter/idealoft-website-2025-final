"use client";

import { useEffect, useState, useTransition } from "react";
import NextLink from "next/link";
import { useRouter, usePathname } from "next/navigation";
import { useScroll } from 'framer-motion';

export const navItems = [
	{
		label: "OUR CLIENTS",
		href: "our-clients",
		type: "page",
	},
	{
		label: "OUR WORK",
		href: "our-work",
		type: "page",
	},
	{
		label: "QUICK CONTACT",
		href: "#",
		type: "button",
	},
];

const MenuToggle = ({ toggle, isOpen }) => {
	return (
		<button className={`relative bottom-2 z-10 bg-[#3E4147] inline-flex items-center justify-center space-x-3 px-7 py-4 rounded-2xl transition-all duration-500 overflow-hidden`} onClick={toggle}>
			<span id="openIcon" className={`transition-all origin-center duration-500 ${ !isOpen ? "scale-100 h-full w-[33px]" : "scale-0 h-0 w-0" }`}>
				<svg width="33" height="34" viewBox="0 0 33 34" fill="none" xmlns="http://www.w3.org/2000/svg">
					<g clipPath="url(#clip0_572_10484)">
						<path d="M16.4151 33.415C7.34932 33.415 7.62939e-05 26.0657 7.62939e-05 17C7.62939e-05 7.93421 7.34932 0.584961 16.4151 0.584961C25.4808 0.584961 32.8301 7.93421 32.8301 17C32.8301 26.0657 25.4808 33.415 16.4151 33.415Z" fill="#DB819B" />
						<path d="M18.5086 13.3955L25.9911 5.31108C26.0404 5.26094 26.1064 5.23061 26.1765 5.22582C26.2466 5.22103 26.3161 5.24213 26.3717 5.28511C26.4273 5.32809 26.4652 5.38998 26.4783 5.45905C26.4914 5.52812 26.4786 5.59958 26.4426 5.6599L20.41 14.907C20.3796 14.9527 20.3628 15.0062 20.3618 15.0612C20.3608 15.1161 20.3756 15.1702 20.4044 15.217C20.4332 15.2638 20.4748 15.3013 20.5243 15.3252C20.5738 15.349 20.6291 15.3582 20.6836 15.3516L30.7789 14.0999C30.8586 14.1035 30.9349 14.1334 30.9959 14.1847C31.057 14.2361 31.0994 14.3062 31.1165 14.3842C31.1337 14.4621 31.1246 14.5436 31.0908 14.6158C31.0569 14.6881 31.0002 14.7472 30.9293 14.7839L21.2034 17.7523C21.1516 17.7683 21.1054 17.7987 21.0701 17.8399C21.0348 17.881 21.0119 17.9314 21.0041 17.985C20.9962 18.0387 21.0037 18.0935 21.0256 18.1431C21.0476 18.1927 21.0832 18.235 21.1282 18.2653L30.4232 24.2636C30.4833 24.3026 30.5265 24.3627 30.5446 24.432C30.5626 24.5014 30.5541 24.5749 30.5207 24.6383C30.4873 24.7017 30.4314 24.7503 30.364 24.7746C30.2967 24.7989 30.2226 24.7972 30.1565 24.7697L20.0065 20.4197C19.956 20.3975 19.9002 20.3903 19.8457 20.3989C19.7912 20.4076 19.7403 20.4318 19.6992 20.4686C19.6581 20.5053 19.6285 20.5532 19.6138 20.6064C19.5992 20.6596 19.6002 20.7159 19.6167 20.7685L22.8586 31.3631C22.8742 31.4298 22.8653 31.4999 22.8337 31.5608C22.8021 31.6216 22.7497 31.6691 22.6861 31.6947C22.6225 31.7203 22.5519 31.7223 22.4869 31.7004C22.422 31.6784 22.367 31.634 22.332 31.5751L17.3391 21.7329C17.3159 21.6836 17.2791 21.6419 17.2331 21.6127C17.1871 21.5835 17.1337 21.568 17.0792 21.568C17.0247 21.568 16.9713 21.5835 16.9253 21.6127C16.8792 21.6419 16.8425 21.6836 16.8193 21.7329L12.524 31.9034C12.5004 31.9759 12.449 32.0362 12.381 32.0708C12.313 32.1054 12.2341 32.1116 12.1615 32.0881C12.0889 32.0645 12.0287 32.013 11.9941 31.945C11.9595 31.8771 11.9533 31.7981 11.9768 31.7256L14.4801 20.96C14.4948 20.9071 14.4935 20.8509 14.4765 20.7987C14.4595 20.7464 14.4276 20.7002 14.3846 20.666C14.3416 20.6317 14.2895 20.6109 14.2347 20.606C14.1799 20.6011 14.125 20.6125 14.0766 20.6386L4.24811 25.6657C4.18371 25.7065 4.10574 25.7201 4.03135 25.7034C3.95695 25.6867 3.89223 25.6412 3.85141 25.5768C3.8106 25.5124 3.79704 25.4344 3.81371 25.36C3.83039 25.2856 3.87593 25.2209 3.94033 25.1801L12.7702 18.5594C12.815 18.5271 12.8496 18.4827 12.8698 18.4314C12.89 18.38 12.895 18.3239 12.8842 18.2698C12.8733 18.2157 12.8472 18.1659 12.8088 18.1263C12.7704 18.0866 12.7214 18.0589 12.6676 18.0464L1.90213 15.5841C1.83026 15.5695 1.7667 15.528 1.72448 15.468C1.68227 15.408 1.6646 15.3341 1.6751 15.2615C1.68559 15.1889 1.72346 15.1231 1.78093 15.0775C1.83841 15.032 1.91113 15.0101 1.98421 15.0165L12.9959 15.632C13.0499 15.6336 13.1032 15.62 13.1497 15.5928C13.1963 15.5655 13.2342 15.5257 13.2592 15.4779C13.2842 15.4301 13.2952 15.3762 13.291 15.3224C13.2867 15.2686 13.2675 15.2171 13.2353 15.1738L6.59409 6.3507C6.55221 6.29334 6.53306 6.22249 6.54035 6.15184C6.54764 6.08119 6.58084 6.01574 6.63355 5.96814C6.68626 5.92053 6.75473 5.89414 6.82576 5.89405C6.89678 5.89397 6.96532 5.9202 7.01814 5.96768L15.0478 13.5117C15.0875 13.5498 15.1372 13.5756 15.1911 13.5862C15.245 13.5968 15.3009 13.5918 15.352 13.5716C15.4031 13.5514 15.4474 13.517 15.4795 13.4725C15.5117 13.4279 15.5304 13.3751 15.5334 13.3202L16.1216 2.29483C16.1322 2.22711 16.1666 2.1654 16.2186 2.12083C16.2707 2.07626 16.3369 2.05176 16.4055 2.05176C16.474 2.05176 16.5403 2.07626 16.5923 2.12083C16.6444 2.1654 16.6788 2.22711 16.6893 2.29483L18.0162 13.2382C18.0238 13.2916 18.0464 13.3417 18.0812 13.3829C18.116 13.4241 18.1618 13.4547 18.2131 13.4711C18.2645 13.4875 18.3195 13.4891 18.3718 13.4757C18.424 13.4624 18.4715 13.4345 18.5086 13.3955V13.3955Z" fill="#FFCCCC" />
						<path d="M16.4148 24.9269C13.7026 24.9265 11.0415 24.1887 8.71632 22.7924C6.39112 21.396 4.48933 19.3938 3.21444 16.9999C4.48829 14.6048 6.38975 12.6014 8.7151 11.2044C11.0405 9.80739 13.7021 9.06934 16.4148 9.06934C19.1276 9.06934 21.7892 9.80739 24.1146 11.2044C26.4399 12.6014 28.3414 14.6048 29.6152 16.9999C28.3403 19.3938 26.4386 21.396 24.1134 22.7924C21.7882 24.1887 19.1271 24.9265 16.4148 24.9269V24.9269Z" fill="white" />
						<path d="M16.4149 22.6906C13.2721 22.6906 10.7244 20.1429 10.7244 17.0001C10.7244 13.8573 13.2721 11.3096 16.4149 11.3096C19.5577 11.3096 22.1055 13.8573 22.1055 17.0001C22.1055 20.1429 19.5577 22.6906 16.4149 22.6906Z" fill="#2B2E34" />
						<path d="M16.4699 15.9606L17.489 13.7719C17.489 13.7035 17.6258 13.7719 17.6053 13.8198L16.9761 16.1452C16.9743 16.1568 16.9756 16.1686 16.9797 16.1795C16.9838 16.1904 16.9906 16.2001 16.9995 16.2077C17.0084 16.2152 17.0191 16.2204 17.0306 16.2226C17.0421 16.2248 17.0539 16.2241 17.065 16.2205L19.069 15.2766C19.078 15.2717 19.0878 15.2685 19.098 15.2674C19.1082 15.2663 19.1185 15.2672 19.1284 15.27C19.1382 15.2729 19.1474 15.2777 19.1554 15.2841C19.1634 15.2905 19.1701 15.2984 19.175 15.3074C19.1799 15.3164 19.1831 15.3262 19.1842 15.3364C19.1853 15.3466 19.1844 15.3569 19.1816 15.3668C19.1787 15.3766 19.1739 15.3858 19.1675 15.3938C19.1611 15.4018 19.1532 15.4085 19.1442 15.4134L17.3317 16.6787C17.3218 16.6849 17.3137 16.6934 17.308 16.7036C17.3023 16.7138 17.2994 16.7252 17.2994 16.7369C17.2994 16.7485 17.3023 16.7599 17.308 16.7701C17.3137 16.7803 17.3218 16.7889 17.3317 16.795L19.6572 17.4106C19.6735 17.4106 19.6892 17.417 19.7007 17.4286C19.7123 17.4401 19.7188 17.4558 19.7188 17.4721C19.7188 17.4884 19.7123 17.5041 19.7007 17.5156C19.6892 17.5272 19.6735 17.5337 19.6572 17.5337L17.2565 17.3216C17.2451 17.321 17.2337 17.3235 17.2236 17.329C17.2135 17.3344 17.2051 17.3426 17.1994 17.3525C17.1938 17.3625 17.191 17.3738 17.1914 17.3853C17.1918 17.3968 17.1954 17.4079 17.2018 17.4174L18.5697 19.394C18.6176 19.4556 18.5287 19.524 18.4739 19.4693L16.7777 17.7662C16.77 17.7566 16.7595 17.7494 16.7477 17.7458C16.7358 17.7422 16.7232 17.7423 16.7113 17.746C16.6995 17.7497 16.6891 17.7568 16.6814 17.7665C16.6737 17.7763 16.6692 17.7881 16.6683 17.8004L16.4631 20.2079C16.4631 20.2243 16.4566 20.2399 16.4451 20.2515C16.4335 20.263 16.4179 20.2695 16.4016 20.2695C16.3852 20.2695 16.3696 20.263 16.358 20.2515C16.3465 20.2399 16.34 20.2243 16.34 20.2079L16.1348 17.8004C16.1339 17.7881 16.1294 17.7763 16.1217 17.7665C16.114 17.7568 16.1036 17.7497 16.0918 17.746C16.0799 17.7423 16.0673 17.7422 16.0554 17.7458C16.0436 17.7494 16.0331 17.7566 16.0254 17.7662L14.3634 19.4693C14.3086 19.524 14.2197 19.4693 14.2676 19.394L15.6355 17.4174C15.6419 17.4079 15.6455 17.3968 15.6459 17.3853C15.6463 17.3738 15.6435 17.3625 15.6379 17.3525C15.6322 17.3426 15.6238 17.3344 15.6137 17.329C15.6037 17.3235 15.5922 17.321 15.5808 17.3216L13.1801 17.5337C13.1638 17.5337 13.1481 17.5272 13.1366 17.5156C13.125 17.5041 13.1186 17.4884 13.1186 17.4721C13.1186 17.4558 13.125 17.4401 13.1366 17.4286C13.1481 17.417 13.1638 17.4106 13.1801 17.4106L15.5056 16.795C15.5155 16.7889 15.5236 16.7803 15.5293 16.7701C15.535 16.7599 15.5379 16.7485 15.5379 16.7369C15.5379 16.7252 15.535 16.7138 15.5293 16.7036C15.5236 16.6934 15.5155 16.6849 15.5056 16.6787L13.5289 15.3108C13.5144 15.3026 13.5037 15.289 13.4993 15.273C13.4948 15.257 13.4968 15.2398 13.505 15.2253C13.5132 15.2108 13.5267 15.2001 13.5428 15.1956C13.5588 15.1911 13.576 15.1932 13.5905 15.2014L15.7313 16.2205C15.7424 16.2241 15.7542 16.2248 15.7657 16.2226C15.7771 16.2204 15.7878 16.2152 15.7967 16.2077C15.8057 16.2001 15.8125 16.1904 15.8166 16.1795C15.8207 16.1686 15.8219 16.1568 15.8202 16.1452L15.1909 13.8198C15.1909 13.7445 15.2799 13.7035 15.3072 13.7719L16.3263 15.9606C16.3263 15.9796 16.3339 15.9979 16.3474 16.0113C16.3608 16.0248 16.3791 16.0324 16.3981 16.0324C16.4172 16.0324 16.4354 16.0248 16.4489 16.0113C16.4624 15.9979 16.4699 15.9796 16.4699 15.9606Z" fill="#FFCCCC" />
						<path d="M23.8155 0.584961H32.8301V9.59953C31.0191 5.60002 27.815 2.39591 23.8155 0.584961V0.584961Z" fill="#65AB78" />
					</g>
					<defs>
						<clipPath id="clip0_572_10484">
							<rect width="32.83" height="32.83" fill="white" transform="matrix(-1 0 0 1 32.8301 0.584961)" />
						</clipPath>
					</defs>
				</svg>
			</span>
			<span className="text-lg font-sans font-bold text-white">Menu</span>
			<div id="line" className={`transition-all duration-500 origin-left ${ isOpen ? "h-[1.2px] w-[80px] scale-x-100" : "h-0 w-0 scale-x-0" } bg-white bg-opacity-30`} />
			<span id="closeIcon" className={`transition-all origin-center duration-500 ${ isOpen ? "scale-100 h-full w-[33px]" : "scale-0 h-0 w-0" }`}>
				<svg width="33" height="34" viewBox="0 0 33 31" fill="none" xmlns="http://www.w3.org/2000/svg">
					<g clipPath="url(#clip0_572_10502)">
						<path d="M16.7486 30.9013C7.86413 30.9013 0.661819 23.9838 0.661819 15.4506C0.661819 6.91749 7.86413 0 16.7486 0C25.6331 0 32.8354 6.91749 32.8354 15.4506C32.8354 23.9838 25.6331 30.9013 16.7486 30.9013Z" fill="#DB819B" />
						<path d="M24.0011 0H32.8354V8.48498C31.0607 4.72043 27.9207 1.70456 24.0011 0V0Z" fill="#65AB78" />
					</g>
					<path opacity="0.8" d="M12.5151 11.3848L20.9819 19.5167" stroke="#F2F2F2" strokeWidth="2.11669" strokeLinecap="round" />
					<path opacity="0.8" d="M12.5151 19.5166L20.9819 11.3847" stroke="#F2F2F2" strokeWidth="2.11669" strokeLinecap="round" />
					<defs>
						<clipPath id="clip0_572_10502">
							<rect width="32.1736" height="30.9013" fill="white" transform="matrix(-1 0 0 1 32.8354 0)" />
						</clipPath>
					</defs>
				</svg>
			</span>
		</button>
	);
};

export default function FixedMenu() {
	const { scrollY } = useScroll(); // Tracks scroll position

	const router = useRouter();
	const pathname = usePathname();

	const [isPending, startTransition] = useTransition();

	const [isOpen, setIsOpen] = useState(false);
	const [scrollStage, setScrollStage] = useState(false); // Tracks the current scroll stage

	// Scroll event listener to determine scroll stages
	useEffect(() => {
		const handleScroll = () => {
			if (scrollY.get() >= 200) {
				setScrollStage(true);
			} else {
				setScrollStage(false);
			}
		};

		const unsubscribe = scrollY.onChange(handleScroll);
		return () => unsubscribe();
	}, [scrollY, pathname]);


	useEffect(() => {
		if (!scrollStage) {
			setIsOpen(false);
		}
	}, [scrollStage]);

	return (
	<div className={`w-[280px] ${ isOpen ? "h-[320px]" : "h-[82px]" } fixed bottom-[var(--spacing-unit)] left-[50%] -translate-x-1/2 flex items-end justify-center z-50 transition-all duration-300 origin-bottom ${ scrollStage ? "scale-1" : "scale-0" } overflow-hidden`}>
		<div className={`absolute z-0 pb-2 pt-[34px] px-2 bg-[#2B2E34] rounded-2xl transition-all duration-500 origin-bottom ${ isOpen ? "scale-100 bottom-0 w-[270.06px] h-[320px]" : "scale-0 bottom-4 w-0 h-0 overflow-hidden opacity-0" } flex flex-col`}>
			{ navItems.map((item, index) => {
				return (
					<NextLink
						key={`menu_nav_${index}`}
						href={item?.href}
						className={`py-[10px] px-[34px] transition-all duration-300 font-sans font-normal hover:font-bold text-lg text-white`}
						style={{
							textDecoration: "none",
						}}
						onClick={(e) => {
							e.preventDefault();
							setIsOpen(false);
							startTransition(() => {
								const url = item?.href.toString();
								router.push(url);
							});
						}}
					>
						<span className={`transition-opacity duration-700 ${ isOpen ? "opacity-100" : "opacity-0" }`}>{item?.label}</span>
					</NextLink>
				);
			})}
		</div>

		<MenuToggle toggle={() => { setIsOpen(!isOpen); }} isOpen={isOpen} />
	</div>
	);
}
